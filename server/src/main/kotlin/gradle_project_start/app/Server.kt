/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package gradle_project_start.app

import com.fasterxml.jackson.module.kotlin.jacksonObjectMapper
import gradle_project_start.app.formats.JacksonMessage
import gradle_project_start.app.formats.jacksonMessageLens
import gradle_project_start.todoapp.ToDoApp
import org.http4k.core.*
import org.http4k.core.Method.GET
import org.http4k.core.Status.Companion.BAD_REQUEST
import org.http4k.core.Status.Companion.OK
import org.http4k.filter.DebuggingFilters
import org.http4k.filter.DebuggingFilters.PrintRequestAndResponse
import org.http4k.routing.bind
import org.http4k.routing.routes
import org.http4k.server.SunHttp
import org.http4k.server.asServer

val myToDoApp = ToDoApp()

fun create(myToApp: ToDoApp): HttpHandler {

    val filter = Filter { handler ->
        val wrapperHandler: HttpHandler = { request ->
            try {
                handler(request)
            } catch (e: Exception) {
                Response(BAD_REQUEST)
            }
        }
        wrapperHandler
    }
    val filters = PrintRequestAndResponse().then(filter)

    val httpHandler = routes(
        "/ping" bind GET to {
            Response(OK).body("pong")
        },

        "/getFirstTaskText" bind GET to {
            val toDoList = myToApp.getActualToDoList()

            Response(OK).with(
                jacksonMessageLens of JacksonMessage("firstTask", "${toDoList[0]?.name}")
            )
        },

        "/getToDoListFormatJSON" bind GET to {
            val toDoList = myToApp.getActualToDoList()
            val jsonObj = jacksonObjectMapper().writeValueAsString(toDoList)

            Response(OK).with(
                jacksonMessageLens of JacksonMessage("toDoList", jsonObj)
            )
        },

        "/addTask" bind GET to { request: Request ->
            val name: String = request.query("text") ?: error("test is required")
            myToApp.addNewTask(ToDoApp.TaskToDo(name, false))
            Response(OK)
        },

        "/formats/json/jackson" bind GET to {
            Response(OK).with(jacksonMessageLens of JacksonMessage("Barry", "Hello there!"))
        },

        "/testing/strikt" bind GET to { request ->
            Response(OK).body("Echo '${request.bodyString()}'")
        }
    ).withFilter(filters)

    return httpHandler

}

fun main() {
    val printingApp: HttpHandler = DebuggingFilters.PrintRequest().then(create(ToDoApp()))
    printingApp.asServer(SunHttp(9000)).start()
}
